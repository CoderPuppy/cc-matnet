os.loadAPI('stoneNet')
os.loadAPI('utils')
os.loadAPI('logging')

function createNet(modem, channel)
	local net = {}
	local stone = stoneNet.createNet(modem, channel)
	local daemons = {}
	local runningDaemons = {}
	local opts = {}
	local mat = '::'

	function net.addDaemon(name, fn)
		if type(fn) ~= 'function' then
			return false
		end

		daemons[name] = fn

		return true
	end

	function net.set(k, v)
		opts[k] = v
	end

	function net.get(k)
		return opts[k]
	end

	function net.run()
		stone.run()

		stone.startDaemon('goldenDaemons')
	end

	function net.stop()
		for name in pairs(daemons) do
			if type(runningDaemons[name]) == 'thread' and not net.stopDaemon(name) then return false end
		end

		if not stone.stopDaemon('goldenDaemons') then return false end

		if not stone.stop() then return false end

		return true
	end

	function net.startDaemon(name)
		local fn = daemons[name]

		if type(fn) ~= 'function' then return false end

		logging.log('Starting Daemon: ' .. name)

		local daemon = coroutine.create(fn)
		runningDaemons[name] = daemon
		utils.erroredResume(daemon, mat)


		return true
	end

	function net.stopDaemon(name)
		local daemon = runningDaemons[name]

		if type(daemon) ~= 'thread' then return false end

		logging.log('Stopping Daemon: ' .. name)

		utils.erroredResume(daemon, { 'lci', {
			command = 'daemon:stop'
		} })

		if coroutine.status(daemon) == 'dead' then
			runningDaemons[name] = nil
		else
			logging.warn(name .. ' didn\'t stop when told to')

			return false
		end

		return true
	end

	function net.handle(ev)
		return stone.handle(ev)
	end

	function net.checkEvent(ev) return stone.checkEvent(ev) end

	net.stone = stone

	stone.addDaemon('goldenDaemons', function(addr)
		while true do
			local _, frame = coroutine.yield()

			if _ == 'lci' then
				if frame.command == 'daemon:stop' then
					return
				end
			elseif _ == 'network' then
				local packet = parseFrame(frame)

				for name, daemon in pairs(runningDaemons) do
					utils.erroredResume(daemon, { 'network', packet })
				end
			end
		end
	end)

	return net
end

function parseFrame(frame)
	local packet = {}
	local data = frame.data

	packet.to = data.to
	packet.from = data.from
	packet.data = data.data
	packet.type = data.type
	packet.frame = frame

	return packet
end

function parseMAT(mat)
	local m, subnetStart

	local mata = {
		netBits = 48
	}

	-- Match the subnet
	m = {mat:find('/(%d+)$')}

	if m[1] and #m == 3 then
		mata.netBits = tonumber(m[3])
		mat = mat:sub(1, m[1] - 1)
	end

	local matArr = utils.split(mat, ':')
	local expanderFound = false
	local outofRow = false
	local expander
	local remove = 0

	-- Find extra blank values (Can't remove them here because of a bug with LuaJ)
	for i, v in ipairs(matArr) do
		if v == '' then
			if not expanderFound then
				expanderFound = true
				expander = i
			elseif outofRow then
				print('More than one expander in MAT address')
				return false
			else
				remove = remove + 1
			end
		else
			if expanderFound and not outofRow then
				outofRow = true
			end
		end
	end

	-- Remove them
	if expanderFound then
		for _=1,remove do
			table.remove(matArr, expander)
		end
	end

	-- Expand the expander
	local newMatArr = {}

	if expanderFound and #matArr < 6 then
		for i, v in pairs(matArr) do
			if v == '' then
				for _ = 1,(6 - (#matArr - 1)) do
					table.insert(newMatArr, 0)
				end
			else
				table.insert(newMatArr, tonumber(v))
			end
		end
		utils.table_slice(matArr, 1, expander - 1)
	end

	mata.parts = newMatArr

	return mata
end

function matToString(mata)
	local expander = false
	local expanderLoc
	local expanderNum
	local outofRow = false
	local foundZero = false

	-- Find where to put an expander
	for i, v in ipairs(mata.parts) do
		if v == 0 then
			if expander and not outofRow then
				expanderNum = expanderNum + 1
			elseif not expander and foundZero then
				expander = true
				expanderNum = 2
				outofRow = false
				foundZero = false
			elseif not expander and not foundZero then
				foundZero = true
				expanderLoc = i
			end
		else
			outofRow = true
		end
	end

	local res

	if expander then
		-- Get the parts before the expander
		res = table.concat(utils.table_slice(mata.parts, 1, expanderLoc - 1), ':') ..
		       '::' ..
		       -- Get the parts after the expander
		       table.concat(utils.table_slice(mata.parts, expanderLoc + expanderNum), ':')
	else
		res = table.concat(mata.parts, ':')
	end

	-- Add the net bits to the end
	return res .. '/' .. tostring(mata.netBits)
end

-- MAT Address Syntax
-- 4 sections each 1 byte long
-- :: expands to as many 0s as necesary
-- /<num> specify how many bits to include in the subnet mask
-- Examples:
-- :: blank mat
-- 127::/8 localhost subnet (gos into the local buffer)
-- 10::/8 private network subnet (these are the mats that computers on private networks should get)
-- 10::1 private network router
-- 224::/8 multicast subnet